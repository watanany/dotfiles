" Maintainer:   Watanabe Shingo <s1170087@gmail.com>
" Last change:  2016 Sep 26
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"         for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"       for OpenVMS:  sys$login:.vimrc

set ruler       " show the cursor position all the time
set showcmd     " display incomplete commands

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Only do this part when compiled with support for autocommands.
if has("autocmd")
    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    " Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
        au!

        " For all text files set 'textwidth' to 78 characters.
        autocmd FileType text setlocal textwidth=78

        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid or when inside an event handler
        " (happens when dropping a file on gvim).
        " Also don't do it when the mark is in the first line, that is the default
        " position when opening a file.
        autocmd BufReadPost *
                    \ if line("'\"") > 1 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif
    augroup END
else
    set autoindent      " always set autoindenting on
endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif

if has('langmap') && exists('+langnoremap')
    " Prevent that the langmap option applies to characters that result from a
    " mapping.  If unset (default), this may break plugins (but it's backward
    " compatible).
    set langnoremap
endif

" --------------------------------------------------
" * dein.vimの設定
" --------------------------------------------------
"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=$HOME/.vim/dein/repos/github.com/Shougo/dein.vim

" Required:
call dein#begin('$HOME/.vim/dein')

" Let dein manage dein
" Required:
call dein#add('Shougo/dein.vim')

" Add or remove your plugins here:
call dein#add('Shougo/neosnippet.vim')
call dein#add('Shougo/neosnippet-snippets')

" You can specify revision/branch/tag.
call dein#add('Shougo/vimshell', { 'rev': '3787e5' })

call dein#add('tpope/vim-fugitive')
call dein#add('ctrlpvim/ctrlp.vim')
call dein#add('flazz/vim-colorschemes')

" カラースキーム
call dein#add('w0ng/vim-hybrid')
" call dein#add('altercation/vim-colors-solarized')
" call dein#add('vim-scripts/BusyBee')
" call dein#add('jonathanfilip/vim-lucius')
" call dein#add('vim-scripts/twilight')

" 補完プラグイン
call dein#add('Shougo/neocomplete')
" コメントアウト
call dein#add('scrooloose/nerdcommenter')
" 対応する括弧を自動入力
call dein#add('Townk/vim-autoclose')
" f + 一文字で検索
call dein#add('rhysd/clever-f.vim')
" s + 二文字で検索
call dein#add('goldfeld/vim-seek')
" ステータスバーのプラグイン
call dein#add('itchyny/lightline.vim')
" ステータスバー用のhybridのcolorscheme
call dein#add('cocopon/lightline-hybrid.vim')
" テキストを整列させるプラグイン
call dein#add('godlygeek/tabular')
" call dein#add('junegunn/vim-easy-align')
" ブラウザを開くコマンドを追加
call dein#add('tyru/open-browser.vim')
" indentの深さに色をつける
call dein#add('nathanaelkane/vim-indent-guides')
" quickrun
call dein#add('thinca/vim-quickrun')
" カーソル移動加速プラグイン
call dein#add('rhysd/accelerated-jk')

" Unite
call dein#add('Shougo/unite.vim')
call dein#add('Shougo/neomru.vim')
call dein#add('Shougo/vimfiler.vim')

" reference viewer
call dein#add('thinca/vim-ref')

" 行末の不要な半角スペースを可視化
call dein#add('ntpeters/vim-better-whitespace')

" text-objectを囲むプラグイン(ys + text-object)
call dein#add('tpope/vim-surround')
call dein#add('tpope/vim-repeat')

" vimからctagsを使う
call dein#add('szw/vim-tags')
" タブ作成・移動・削除
call dein#add('watanany/vim-tabs')
" カーソル移動
" call dein#add('Lokaltog/vim-easymotion')
" セッション保存
call dein#add('tpope/vim-obsession')

" HTML ---
" HTML5 Syntax
call dein#add('othree/html5.vim')

" HTMLのショートカットプラグイン
call dein#add('mattn/emmet-vim')

" Markdown, reStructuredText, textile プレビュープラグイン
call dein#add('kannokanno/previm')

" CSS ---
call dein#add('hail2u/vim-css3-syntax')

" JavaScript ---
call dein#add('vim-scripts/jQuery')

call dein#add('jelera/vim-javascript-syntax')

call dein#add('mattn/jscomplete-vim')

" CoffeeScript ---
" coffee scriptのsyntax + 自動compileのプラグイン
call dein#add('kchmck/vim-coffee-script')

call dein#add('digitaltoad/vim-pug')

" Ruby ---
call dein#add('vim-scripts/ruby-matchit')

call dein#add('tpope/vim-endwise')

call dein#add('yuku-t/vim-ref-ri')

" Ruby on Rails
call dein#add('tpope/vim-rails')

call dein#add('tpope/vim-bundler')

call dein#add('basyura/unite-rails')

call dein#add('scrooloose/syntastic')


" Python ---
" call dein#add('davidhalter/jedi-vim')

" call dein#add('lambdalisue/vim-pyenv')

" Haskell ---
call dein#add('kana/vim-filetype-haskell')

call dein#add('eagletmt/ghcmod-vim')

call dein#add('ujihisa/neco-ghc')

" call dein#add('osyo-manga/vim-watchdogs')

call dein#add('ujihisa/ref-hoogle')

call dein#add('ujihisa/unite-haskellimport')

" Scala ---
call dein#add('derekwyatt/vim-scala')

" Elixir ---
call dein#add('elixir-lang/vim-elixir')

" Required:
call dein#end()

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif
"End dein Scripts-------------------------


" カラースキームをhybridに変える
set background=dark
colorscheme hybrid

" colorscheme busybee
" colorscheme twilight256

" インデントをTabではなくスペース2つで揃える
" タブを画面で表示する際の幅(ts)
set tabstop=2
" タブを挿入する際、半角スペースに変換(et)
set expandtab
" インデント時に使用されるスペースの数(sw)
set shiftwidth=2
" タブ入力時その数値分だけ半角スペースを挿入する(sts)
set softtabstop=2


" 環境設定系
" スクロールする時に下が見えるようにする
set scrolloff=5
" .swapファイルを作らない
set noswapfile
" バックアップファイルを作らない
set nowritebackup
" バックアップをしない
set nobackup
" ビープ音を消す
set vb
set t_vb=
set noerrorbells
" 行番号を表示
set number
" 移動コマンドを使ったとき、行頭に移動しない
set nostartofline
" 対応括弧に<と>のペアを追加
set matchpairs& matchpairs+=<:>
" 対応括弧をハイライト表示する
set showmatch
" 対応括弧の表示秒数を3秒にする
set matchtime=3
" ウィンドウの幅より長い行は折り返され、次の行に続けて表示される
set wrap
" 入力されているテキストの最大幅を無効にする
set textwidth=0
" 不可視文字を表示
set list
" 不可視文字を表示
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:$
" インデントをshiftwidthの倍数に丸める
set shiftround
" 補完の際の大文字小文字の区別しない
set infercase
" 文字がない場所にもカーソルを移動できるようにする
" set virtualedit=all
" 変更中のファイルでも、保存しないで他のファイルを表示
set hidden
" 新しく開く代わりにすでに開いてあるバッファを開く
set switchbuf=useopen
" 小文字の検索でも大文字も見つかるようにする
set ignorecase
" ただし大文字も含めた検索の場合はその通りに検索する
set smartcase
" コマンドを画面最下部に表示する
set showcmd
" ステータスラインを常に表示する
set laststatus=2
" ステータスラインを2行にする
set cmdheight=2
" ステータスラインを常に表示
set statusline=%F%r%h%=
" 補完時の一覧表示機能有効化
set wildmenu wildmode=list:full
" カーソルラインの強調表示を有効化
" CUI環境だと重い
"set cursorline
" カーソル移動の動作を変更
set whichwrap=b,s,h,l,<,>,[,]

" w!! でスーパーユーザーとして保存（sudoが使える環境限定）
cmap w!! w !sudo tee % > /dev/null
" 入力モード中に素早くJJと入力した場合はESCとみなす
inoremap jj <Esc>
" C-jをESCに設定
imap <C-j> <Esc>
" ESCを二回押すことでハイライトを消す
nmap <silent> <Esc><Esc> :nohlsearch<CR>
" カーソル下の単語を * で検索
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v, '\/'), "\n", '\\n', 'g')<CR><CR>
" 検索後にジャンプした際に検索単語を画面中央に持ってくる
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz
" vを二回で行末まで選択
vnoremap v $h
" TABにて対応ペアにジャンプ
nnoremap <Tab> %
vnoremap <Tab> %
" キー配置に合わせて1で行頭、0で行末に移動
" nnoremap 1 0
" nnoremap 0 $
" Shift + 矢印でウィンドウサイズを変更
nnoremap <S-Left>  <C-w><<CR>
nnoremap <S-Right> <C-w><CR>
nnoremap <S-Up>    <C-w>-<CR>
nnoremap <S-Down>  <C-w>+<CR>
" T + 一文字 で各種設定をトグル
nnoremap <silent> Ts :setl spell!     spell?<CR>
nnoremap <silent> Tl :setl list!      list?<CR>
nnoremap <silent> Tt :setl expandtab! expandtab?<CR>
nnoremap <silent> Tw :setl wrap!      wrap?<CR>
nnoremap <silent> Tp :setl paste!     paste?<CR>


" vim 起動時のみカレントディレクトリを開いたファイルの親ディレクトリに指定
function! s:ChangeCurrentDir(directory, bang)
    if a:directory == ''
        lcd %:p:h
    else
        execute 'lcd' . a:directory
    endif

    if a:bang == ''
        pwd
    endif
endfunction

" /{pattern}の入力中は「/」をタイプすると自動で「\/」が、
" ?{pattern}の入力中は「?」をタイプすると自動で「\?」が 入力されるようになる
cnoremap <expr> / getcmdtype() == '/' ? '\/' : '/'
cnoremap <expr> ? getcmdtype() == '?' ? '\?' : '?'

" インサートモードでも移動
"inoremap <c-d> <delete>
"inoremap <c-j> <down>
"inoremap <c-k> <up>
"inoremap <c-h> <left>
"inoremap <c-l> <right>

" 画面切り替え
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h

" <space>j, <space>kで画面送り
" noremap <space>j <c-f><cr><cr>
" noremap <space>k <c-b><cr><cr>

" vaで全選択
vnoremap a <Esc>ggVG

" JSON編集時にconceal機能を無効化
autocmd Filetype json setl conceallevel=0

" .scssファイル読み込み時にファイルタイプにsassをセットする
autocmd BufRead,BufNewFile *.scss setf sass

" .exsファイル読み込み時にファイルタイプをelixirにセットする
autocmd BufRead,BufNewFile *.exs setf elixir

" .jbuilderファイル読み込み時にファイルタイプをrubyにセットする
autocmd BufRead,BufNewFile *.jbuilder setf ruby

"""
" setting
"""

"--------------------------------------------------------------------------------
" accelerated_jk
"--------------------------------------------------------------------------------
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
nmap <DOWN> <Plug>(accelerated_jk_gj)
nmap <UP> <Plug>(accelerated_jk_gk)

"--------------------------------------------------------------------------------
" js-complete
"--------------------------------------------------------------------------------
let g:jscomplete_use = ['dom']

"--------------------------------------------------------------------------------
" lightline
"--------------------------------------------------------------------------------
let g:lightline = {}
let g:lightline.colorscheme = 'hybrid'
" let g:lightline_hybrid_style = 'plain'

"--------------------------------------------------------------------------------
" matchit
"--------------------------------------------------------------------------------
runtime macros/matchit.vim


"--------------------------------------------------------------------------------
" neocomplete
"--------------------------------------------------------------------------------
" Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return neocomplete#close_popup() . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType python setlocal omnifunc=jedi#completions

autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'





"--------------------------------------------------------------------------------
" neosnippet
"--------------------------------------------------------------------------------
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif



"--------------------------------------------------------------------------------
" nerdcommenter
"--------------------------------------------------------------------------------
" nerdcommenterの設定「,,」でコメントON/OFF切り替え
" let g:NERDCreateDefaultMappings = 0
let NERDSpaceDelims = 1
nmap ,, <Plug>NERDCommenterToggle
vmap ,, <Plug>NERDCommenterToggle



"--------------------------------------------------------------------------------
" syntastic
"--------------------------------------------------------------------------------
" Rubyファイル保存時にRubocopを走らせる
" let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['ruby'] }
let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_ruby_checkers = ['rubocop', 'mri']



"--------------------------------------------------------------------------------
" Unite
"--------------------------------------------------------------------------------
let g:unite_source_file_mru_limit = 300
" バッファリスト
nnoremap <silent>,b :Unite -toggle buffer<CR>
" 最近使ったファイル
nnoremap <silent>,m :Unite -toggle file_mru<CR>

" Ruby on Rails
nnoremap <silent>,rc :Unite -toggle rails/controller<CR>
nnoremap <silent>,rm :Unite -toggle rails/model<CR>
nnoremap <silent>,rv :Unite -toggle rails/view<CR>
nnoremap <silent>,rC :Unite -toggle rails/config<CR>
nnoremap <silent>,rd :Unite -toggle rails/db<CR>




"--------------------------------------------------------------------------------
" vim-better-white-space
"--------------------------------------------------------------------------------
" 保存時に末尾の空白を除去
" autocmd BufWritePre * :%s/\s\+$//ge
autocmd BufWritePre * StripWhitespace
highlight ExtraWhitespace ctermbg=darkred



"--------------------------------------------------------------------------------
" vim-indent-guide
"--------------------------------------------------------------------------------
" インデントの深さに色をつける
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_color_change_percent=20
let g:indent_guides_guide_size=1
let g:indent_guides_space_guides=1

hi IndentGuidesOdd  ctermbg=235
hi IndentGuidesEven ctermbg=237



"--------------------------------------------------------------------------------
" vim-pyenv
"--------------------------------------------------------------------------------
" if jedi#init_python()
"   function! s:jedi_auto_force_py_version() abort
"     let major_version = pyenv#python#get_internal_major_version()
"     call jedi#force_py_version(major_version)
"   endfunction
"   augroup vim-pyenv-custom-augroup
"     autocmd! *
"     autocmd User vim-pyenv-activate-post   call s:jedi_auto_force_py_version()
"     autocmd User vim-pyenv-deactivate-post call s:jedi_auto_force_py_version()
"   augroup END
" endif
"


"--------------------------------------------------------------------------------
" vim-quickrun
"--------------------------------------------------------------------------------
let g:quickrun_config={'*': {'split': 'vertical'}}


"--------------------------------------------------------------------------------
" vim-tags
"--------------------------------------------------------------------------------
let g:vim_tags_auto_generate = 1



"--------------------------------------------------------------------------------
" vimfiler
"--------------------------------------------------------------------------------
" vimfiler表示の際は行番号を付けない
autocmd Filetype vimfiler setlocal nonumber
autocmd Filetype vimfiler setlocal norelativenumber

" ダブルクリックでファイルを開けるようにする
" autocmd Filetype vimfiler nmap <buffer> <2-LeftMouse> <Plug>(vimfiler_edit_file)

" ファイルリスト
nnoremap <silent>,f :VimFiler -split -simple -toggle -winwidth=35 -no-quit<CR>

" VimFilerをデフォルトのファイルエクスプローラーにする
let g:vimfiler_as_default_explorer = 1

" タブで開くようにする
" let g:vimfiler_edit_action = 'tabopen'
